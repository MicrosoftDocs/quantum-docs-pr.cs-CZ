### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplybymodularinteger
name: MultiplyByModularInteger
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  Provede modulární násobení pomocí celočíselné konstanty v qubit registru.


  Poznamenejte si `modulus` je $N $ a `constMultiplier` pomocí $a $.

  Tato operace pak implementuje jednotnou operaci definovanou na základě následujícího mapování na výpočetní bázi: $ $ \begin{align} \ket{y} \mapsto \ket{(a \cdot y) \operatorname{mod} N} \end{align} $ $ pro všechny $y $ mezi $0 $ a $N-$1.
remarks: >-
  - Pro diagram okruhu a vysvětlení viz obrázek 7 na [stránce 8 arXiv: quant-pH/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=8)

  - Tato operace odpovídá ₐ U v [arXiv: quant-pH/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf)
syntax: 'operation MultiplyByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: constMultiplier
    summary: Konstanta, o kterou se násobí násobitel. Musí být souběžně s modulem.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: Operace násobení je prováděna modulo `modulus`.
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: >-
      Číslo vynásobené konstantou.

      Toto je pole qubits kódování celé číslo ve formátu Little endian.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 48a0f19334f65a6b80003d90dc4dc216dc8dee98
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676739"
