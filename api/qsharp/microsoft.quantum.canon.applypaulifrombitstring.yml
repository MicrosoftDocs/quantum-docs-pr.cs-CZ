### YamlMime:QSharpType
uid: microsoft.quantum.canon.applypaulifrombitstring
name: ApplyPauliFromBitString
type: operation
namespace: microsoft.quantum.canon
summary: Aplikuje operátor Pauli na každou qubit v poli, pokud odpovídající bit logického pole odpovídá danému vstupu.
remarks: Pole Boolean a registr s police musí mít stejnou délku.
syntax: 'operation ApplyPauliFromBitString (pauli : Pauli, bitApply : Bool, bits : Bool[], qubits : Qubit[]) : Unit'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[], qubits : Qubit[])'
  types:
  - name: pauli
    summary: Operátor Pauli, který se má použít na `qubits[idx]` WHERE `bitsApply == bits[idx]`
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: Pokud je tato hodnota bit, použijte Pauli.
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: Logický registr určující, který odpovídající qubit v `qubits` by měl být provozován
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: qubits
    summary: Registrování v registru, ve kterém se selektivně použijí zadaný Pauli operátor
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 18b7279a52080ab5571f9fca3c1e1d150c3755d9
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91472591"
