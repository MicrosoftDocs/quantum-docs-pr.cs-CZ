### YamlMime:QSharpType
uid: microsoft.quantum.preparation.quantumrom
name: QuantumROM
type: function
namespace: Microsoft.Quantum.Preparation
summary: >-
  Vystupuje danou matici hustoty pomocí techniky paměti pro paměťová pole.


  Když se zobrazí seznam $N $ koeficientů $ \alpha_j $, vrátí se jednotková $U $, která využívá techniku pro vystavení paměti pro přípravu aproximace $ \tilde\rho\sum_{j = 0} ^ {N-1} p_j\ket {j} \ Bra {j} $ z čištění matrice hustoty $ \rho = \sum_{j = 0} ^ {N-1} \frac{| alpha_j |} {\sum_k | \alpha_k |} \ket{j}\bra{j} $. V této aproximaci je chyba $ \epsilon $ taková, že $ | p_j-\frac{| alpha_j |} {\sum_k | \alpha_k |} | \le \epsilon/N $ a $\|\tilde\rho-\rho\| \le \epsilon $. Jinými slovy $ $ \begin{align} U\ket{0}^ {\lceil\log_2 N\rceil} \ KET{0}^ {m} = \sum_{j = 0} ^ {N-1} \sqrt{p_j} \ket{j}\ket{\Text{garbage}_J}.

  \end{align} $ $
examples: >-
  Následující fragment kódu připraví čištění pro $3 $-qubit State $ \rho = \sum_{j = 0} ^{4}\frac{| alpha_j |} {\sum_k | \alpha_k |} \ket{j}\bra{j} $, kde $ \vec\alpha = (1.0, 2.0, 3.0, 4.0, 5.0) $, a chyba je `1e-3`;


  ```qsharp

  let coefficients = [1.0,2.0,3.0,4.0,5.0];

  let targetError = 1e-3;

  let ((nTotalQubits, (nIndexQubits, nGarbageQubits)), oneNorm, op) = QuantumROM(targetError, coefficients);

  using (indexRegister = Qubit[nIndexQubits]) {
      using (garbageRegister = Qubit[nGarbageQubits]) {
          op(LittleEndian(indexRegister), garbageRegister);
      }
  }

  ```
syntax: 'function QuantumROM (targetError : Double, coefficients : Double[]) : ((Int, (Int, Int)), Double, ((Microsoft.Quantum.Arithmetic.LittleEndian, Qubit[]) => Unit is Adj + Ctl))'
references: '- Kódování elektronického spektra v Okruhech v případě využití lineární T, Babbush, Craig Gidney, Dominic W. bobulovin, Nathan Wiebe, Jarrod McClean, Alexandru bledější, Austin Fowlera, Hartmut Neven https://arxiv.org/abs/1805.03662'
input:
  content: '(targetError : Double, coefficients : Double[])'
  types:
  - name: targetError
    summary: Cílová chyba $ \epsilon $.
    isPrimitive: true
    uid: Double
  - name: coefficients
    summary: >-
      Pole $N $ koeficientů určujících pravděpodobnost základních stavů.

      Záporná čísla $-\alpha_j $ se budou považovat za pozitivní $ | \alpha_j | $.
    isArray: true
    isPrimitive: true
    uid: Double
output:
  content: ((Int, (Int, Int)), Double, ((Microsoft.Quantum.Arithmetic.LittleEndian, Qubit[]) => Unit is Adj + Ctl))
  types:
  - summary: >-
      ## <a name="first-parameter"></a>První parametr


      Řazená kolekce členů `(x,(y,z))`, kde `x = y + z` je celkový počet přidělených qubits, `y` je počet qubits pro `LittleEndian`ový registr a `z` je počet qubitsů pro uvolnění paměti.


      ## <a name="second-parameter"></a>Druhý parametr


      Jedna-norma $ \sum_j | \alpha_j | $ z pole koeficient.


      ## <a name="third-parameter"></a>Třetí parametr


      Jednotková $U $.
    types:
    - types:
      - isPrimitive: true
        uid: Int
      - types:
        - isPrimitive: true
          uid: Int
        - isPrimitive: true
          uid: Int
    - isPrimitive: true
      uid: Double
    - isOperation: true
      input:
        types:
        - uid: microsoft.quantum.arithmetic.littleendian
        - isArray: true
          isPrimitive: true
          uid: Qubit
      output:
        types:
        - isPrimitive: true
          uid: Unit
      functors:
      - Adjoint
      - Controlled
ms.openlocfilehash: 33d21289b0b1ad64577677d5fa5ca622346224cc
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: cs-CZ
ms.lasthandoff: 10/31/2019
ms.locfileid: "73226416"
