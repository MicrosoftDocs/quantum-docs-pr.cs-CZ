### YamlMime:QSharpType
uid: microsoft.quantum.canon.controlledonbitstring
name: ControlledOnBitString
type: function
namespace: Microsoft.Quantum.Canon
summary: >-
  Vrátí jednotnou operaci, která použije Oracle v cílovém registru, pokud stav registru ovládacího prvku odpovídá zadané bitové masce.


  Výstupem této funkce je operace, kterou může představovat jednotná transformace $U $, kterou \begin{align} U \ket{b_0 b_1 \cdots b_ {n-1} \ket{\psi} = \ket{b_0 b_1 \cdots b_ {n-1}} \otimes \begin{Cases} V \ket{\psi} & \textrm{if} (b_0 b_1 \cdots b_ {n-1}) = \texttt{BITS} \\\\ \ket{\psi} & \textrm{Otherwise} \end{Cases}, \end{align}, kde $V $ je jednotná transformace, která představuje akci operace `oracle`.
remarks: >-
  Délka `bits` a `controlRegister` musí být rovna.


  Vzhledem k logickému poli `bits` a jednotkovým `oracle`m provozu je výstup této funkce operace, která provede následující kroky:


  * použijte operaci `X` u každého qubit registru ovládacího prvku, který odpovídá `false` elementu `bits`;

  * Použijte `Controlled oracle` pro Registry Control a target;

  * použijte operaci `X` u každého qubit registru ovládacího prvku, který odpovídá `false` elementu `bits` znovu pro vrácení registru ovládacího prvku do původního stavu.


  Výstupem `Controlled` funktor je zvláštní případ `ControlledOnBitString`, kde `bits` se rovná `[true, ..., true]`.
examples: >-
  Následující fragmenty kódu jsou ekvivalentní:


  ```qsharp

  (ControlledOnBitString(bits, oracle))(controlRegister, targetRegister);

  ```


  a


  ```qsharp

  within {
      ApplyPauliFromBitString(PauliX, false, bits, controlRegister);
  } apply {
      Controlled oracle(controlRegister, targetRegister);
  }

  ```


  Následující kód připraví stav $ \frac{1}{2}(\ket{00}-\ket{01} + \ket{10} + \ket{11}) $:


  ```qsharp

  using (register = Qubit[2]) {
      ApplyToEach(H, register);
      (ControlledOnBitString([false], Z))(register[0..0], register[1]);
  }

  ```
syntax: "function ControlledOnBitString (bits : Bool[], oracle : ('T => Unit is Adj + Ctl)) : ((Qubit[], 'T) => Unit is Adj + Ctl)"
input:
  content: "(bits : Bool[], oracle : ('T => Unit is Adj + Ctl))"
  types:
  - name: bits
    summary: Bitový řetězec, na kterém se má řídit daná Jednotková operace.
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: oracle
    summary: Jednotná operace, která se má použít v cílovém registru.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: ((Qubit[], 'T) => Unit is Adj + Ctl)
  types:
  - summary: Jednotková operace, která se používá `oracle` v cílovém registru, pokud stav registru ovládacího prvku odpovídá bitové masce `bits`.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: e6f7f8980b2b9b8305df12da41e30fc563e54ad1
  ms.sourcegitcommit: 6ccea4a2006a47569c4e2c2cb37001e132f17476
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 02/28/2020
  ms.locfileid: "77906521"
