### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyi
name: MultiplyI
type: operation
namespace: microsoft.quantum.arithmetic
summary: Vynásobit celé číslo `xs` `ys` a uložit výsledek do `result` , který musí být zpočátku nula.
remarks: >-
  K implementaci násobení slouží standardní přístup Shift-and-Add.

  Řízená verze se vylepšila tak, že se $x _i $ do ancilla qubit v podmínce qubits ovládacího prvku a pak se řízení přidalo na ancilla qubit.
syntax: 'operation MultiplyI (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: xs
    summary: $n $-bit multiplicand (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: $n $-bit násobitele (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: result
    summary: $2N $-bit výsledek (LittleEndian), musí být ve stavu $ \ket {0} $ zpočátku.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 6d5c6311f77f62d0db2fca2d3f0fe2f02cf3789f
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91476671"
