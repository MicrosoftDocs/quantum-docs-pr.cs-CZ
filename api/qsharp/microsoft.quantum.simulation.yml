### YamlMime:QSharpNamespace
functions:
- summary: Přidá dvě `GeneratorSystem` s pro vytvoření nového `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.AddGeneratorSystems
- summary: >-
    Zakóduje operátor zájmu do `BlockEncoding` .

    Tato konstrukce vytvoří `BlockEncoding` jednotkovou $U = P\cdot V\cdot P ^ \dagger $, který kóduje nějaký operátor $H = \ sum_ {j} | \ alpha_j | U_j $ z zájmu je lineární kombinací unitaries. $P $ je obvykle státní příprava, takže $P \ket {0} \_ a = \ sum_j \sqrt{\ alpha_j/ \| \vec\alpha \| \_ 2} \ket{j} \_ a $ a $V = \ sum_ {j} \ket{j}\bra{j} \_ a\otimes U_j $.
  uid: Microsoft.Quantum.Simulation.BlockEncodingByLCU
- summary: >-
    Zakóduje operátor zájmu do `BlockEncodingReflection` .

    Tato konstrukce vytvoří `BlockEncodingReflection` jednotkovou $U = P\cdot V\cdot P ^ \dagger $, který kóduje nějaký operátor $H = \ sum_ {j} | \ alpha_j | U_j $ z zájmu je lineární kombinací unitaries. $P $ je typicky Příprava stavu, takže $P \ket {0} \_ a \ sum_j \sqrt{\ alpha_j/ \| \vec\alpha \| \_ 2} \ket{j} \_ a $ a $V = \ sum_ {j} \ket{j}\bra{j} \_ a\otimes U_j $.
  uid: Microsoft.Quantum.Simulation.BlockEncodingReflectionByLCU
- summary: >-
    Převede na `BlockEncoding` ekvivalentní `BLockEncodingReflection` .

    To znamená, že s ohledem na `BlockEncoding` jednotkové $U $, který kóduje nějaký operátor $H $ Interest, převede ho na `BlockEncodingReflection` $U $, který kóduje stejný operátor, ale také splňuje $U ' ^ \Dagger = U ' $. Tím se zvýší velikost pomocného registru $U $ o jeden qubit.
  uid: Microsoft.Quantum.Simulation.BlockEncodingToReflection
- summary: Načte `GeneratorIndex` funkci v `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.GetGeneratorSystemFunction
- summary: Načte počet podmínek v `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.GetGeneratorSystemNTerms
- summary: Vrátí index generátoru konzistentní s nulovým Hamiltonian, `H = 0` který odpovídá operaci vývoje identity.
  uid: Microsoft.Quantum.Simulation.IdentityGeneratorIndex
- summary: Vrátí systém generátoru konzistentní s nulovým Hamiltonian `H = 0` , který odpovídá operaci vývoje identity.
  uid: Microsoft.Quantum.Simulation.IdentityGeneratorSystem
- summary: Vrátí systém generátoru závislý na čase, který je konzistentní s Hamiltonian `H(s) = 0` .
  uid: Microsoft.Quantum.Simulation.IdentityTimeDependentGeneratorSystem
- summary: Používá se v implementaci `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.IdxToCoeff
- summary: Používá se v implementaci `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.IdxToUnitary
- summary: Převede celé číslo na operátor Pauli s jedním qubit.
  uid: Microsoft.Quantum.Simulation.IntToPauli
- summary: Vrátí `TimeDependentGeneratorSystem` reprezentující lineární interpolaci mezi dvěma `GeneratorSystem` s.
  uid: Microsoft.Quantum.Simulation.InterpolateGeneratorSystems
- summary: Lineárně interpoluje dvě `GeneratorSystems` závislosti na parametru plánu `s` mezi 0 a 1 (včetně).
  uid: Microsoft.Quantum.Simulation.InterpolateGeneratorSystemsImpl
- summary: Interpoluje mezi dvěma generátory s jednotným plánem a vrátí operaci, která použije Simulovaný vývoj v rámci výsledného generátoru závislého na čase do qubit registru.
  uid: Microsoft.Quantum.Simulation.InterpolatedEvolution
- summary: Převede pole celých čísel na pole qubitch operátorů Pauli s jedním.
  uid: Microsoft.Quantum.Simulation.IntsToPaulis
- summary: Vynásobí koeficient v `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.MultiplyGeneratorIndex
- summary: Vynásobí koeficient všech podmínek v `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.MultiplyGeneratorSystem
- summary: >-
    Vytvoří jednotkové kódování bloku pro Hamiltonian.

    Hamiltonian $H = \ sum_ {j} \ alpha_j P_j $ je popsána na základě součtu Pauli podmínek $P _j $, každý s reálným koeficientem $ \ alpha_j $.
  uid: Microsoft.Quantum.Simulation.PauliBlockEncoding
- summary: Extrahuje koeficient Pauli výrazu, který je popsán v `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.PauliCoefficientFromGenIdx
- summary: Představuje dynamický generátor jako sadu simulovaných bran a rozšíření v Pauli.
  uid: Microsoft.Quantum.Simulation.PauliEvolutionFunction
- summary: Představuje dynamický generátor jako sadu simulovaných bran a rozšíření v Pauli.
  uid: Microsoft.Quantum.Simulation.PauliEvolutionSet
- summary: Používá se v implementaci `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.PauliLCUUnitary
- summary: Extrahuje řetězec Pauli a jeho qubit indexy Pauliho výrazu, který je popsán v `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.PauliStringFromGenIdx
- summary: Převede reflexi kódování bloku na Projděte.
  uid: Microsoft.Quantum.Simulation.QuantumWalkByQubitization
- summary: Přidá více `GeneratorSystem` s pro vytvoření nové GeneratorSystem.
  uid: Microsoft.Quantum.Simulation.SumGeneratorSystems
- summary: '`TimeDependentSimulationAlgorithm` funkce, která používá dekompozici Trotter – Suzuki k aproximaci jednotkového operátoru, který řeší rovnici Schrodinger závislé na čase.'
  uid: Microsoft.Quantum.Simulation.TimeDependentTrotterSimulationAlgorithm
- summary: '`SimulationAlgorithm` funkce, která používá dekompozici Trotter – Suzuki k aproximaci operátoru vývoj času _EXP (-iHt)_ .'
  uid: Microsoft.Quantum.Simulation.TrotterSimulationAlgorithm
- summary: Implementuje jediný časový krok pro vývoj času systémem, který je popsaný v tématu `EvolutionGenerator` použití Trotter – Suzuki rekompozice.
  uid: Microsoft.Quantum.Simulation.TrotterStep
- summary: Přidá dvě `GeneratorSystem` s pro vytvoření nového `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation._AddGeneratorSystems
- summary: Vrátí systém generátoru konzistentní s Hamiltonian `H(s) = 0` , kde `s` je parametr plánu.
  uid: Microsoft.Quantum.Simulation._IdentityTimeDependentGeneratorSystem
- summary: Vynásobí koeficient všech podmínek v `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation._MultiplyGeneratorSystem
- summary: >-
    Vytvoří jednotkové kódování bloku pro Hamiltonian.

    Hamiltonian $H = \ sum_ {j} \ alpha_j P_j $ je popsána na základě součtu Pauli podmínek $P _j $, každý s reálným koeficientem $ \ alpha_j $.
  uid: Microsoft.Quantum.Simulation._PauliBlockEncoding
name: Microsoft.Quantum.Simulation
newtypes:
- summary: >-
    Představuje jednotnou, kde je libovolný operátor zájmu kódovaný v horním levém bloku.

    To znamená, že `BlockEncoding` se jedná o jednotnou $U $, kde libovolný operátor $H $ Interest, který funguje v registru systému, `s` je kódovaný v horním levém bloku, který odpovídá pomocnému stavu $ \ket {0} _a $. To znamená $ $ \begin{align} (\bra {0} _a \otimes I_s) U (\ket {0} _a \otimes I_s) = H \end{align} $ $.
  uid: Microsoft.Quantum.Simulation.BlockEncoding
- summary: Představuje `BlockEncoding` také reflexi.
  uid: Microsoft.Quantum.Simulation.BlockEncodingReflection
- summary: >-
    Představuje dynamický generátor jako sadu simulovaných bran a rozšíření z hlediska tohoto základu.

    Poslední parametr pro počet podmínek
  uid: Microsoft.Quantum.Simulation.EvolutionGenerator
- summary: >-
    Představuje dynamický generátor závislý na čase.

    `Double`Parametr je plán v $ [0, 1] $.
  uid: Microsoft.Quantum.Simulation.EvolutionSchedule
- summary: >-
    Představuje sadu bran, které lze snadno implementovat a použít k implementaci algoritmů simulace.

    Prvky v sadě jsou indexovány  <xref:microsoft.quantum.simulation.generatorindex> a a každá sada je popsána funkcí z `GeneratorIndex` na  <xref:microsoft.quantum.simulation.evolutionunitary> , což jsou operace parametrizované reálné číslo představující čas
  uid: Microsoft.Quantum.Simulation.EvolutionSet
- summary: >-
    Představuje jednotnou obsluhu časového vývoje.

    Prvním parametrem je doba trvání vývoje času a druhý parametr je qubit registrem, který se používá v rámci jednotně.
  uid: Microsoft.Quantum.Simulation.EvolutionUnitary
- summary: >-
    Představuje jeden primitivní výraz v sadě všech dynamických generátorů, např. Hermitian operátory, pro které existuje mapa od tohoto generátoru k časovému vývoji tohoto generátoru prostřednictvím `EvolutionSet` .

    První prvek (int []; Double []) je index, který je jedním termínem--například řetězec Pauli XXY s koeficientem 0,5 by byl indexován ([1, 1, 2], [0,5]). Alternativně je Hamiltonians Parametrizovaná souvislou proměnnou, jako je například X cos φ + Y Sin φ, může být instance reprezentovaná ([], [φ]). Druhý prvek indexuje podsystém, na kterém generátor působí.
  uid: Microsoft.Quantum.Simulation.GeneratorIndex
- summary: >-
    Představuje kolekci `GeneratorIndex` ES.

    Procházíme přes tuto kolekci s použitím jednoho indexu celé číslo a velikost kolekce se předpokládá jako známá.
  uid: Microsoft.Quantum.Simulation.GeneratorSystem
- summary: >-
    Představuje algoritmus simulace závislý na čase.

    Technika simulace, která je závislá na čase, převede <xref:microsoft.quantum.simulation.evolutiongenerator> na pro určitý časový interval na jednotkový vývoj.
  uid: Microsoft.Quantum.Simulation.SimulationAlgorithm
- summary: >-
    Představuje `BlockEncoding` , který je řízen registrem hodin.

    To znamená, že `TimeDependentBlockEncoding` se jedná o jednotnou $U $ řízenou stavem $ \ket{k} _d $ v registraci hodin `d` tak, aby libovolný operátor $H _k $ zájmu, který funguje v registru systému, `s` byl kódovaný v levém horním bloku, který odpovídá pomocnému stavu $ \ket {0} _a $. To znamená $ $ \begin{align} (\bra {0} \_ a\otimes i_ {DS}) U (\ket {0} \_ a\otimes I_ {DS}) = \ sum_ {k} \ket{k}\bra{k} \_ d\otimes H_k. \end{align} $ $.
  uid: Microsoft.Quantum.Simulation.TimeDependentBlockEncoding
- summary: Představuje časově závislý dynamický generátor jako funkci od času k hodnotě dynamického generátoru v daném čase.
  uid: Microsoft.Quantum.Simulation.TimeDependentGeneratorSystem
- summary: >-
    Představuje algoritmus simulace závislý na čase.

    Technika časově závislá na čase převede <xref:microsoft.quantum.simulation.evolutionschedule> na určitý časový interval na jednotkový vývoj času.
  uid: Microsoft.Quantum.Simulation.TimeDependentSimulationAlgorithm
- summary: Představuje vývoj pod operátorem s jednou jednotkou.
  uid: Microsoft.Quantum.Simulation.Unitary
operations:
- summary: Provede přípravu stavu pomocí `statePrepUnitary` příkazu ve stavu vstupu, následovaným přípravou stavu adiabatic pomocí a `adiabaticUnitary` , a konečně odhadem fáze s ohledem na `qpeUnitary` výsledný stav pomocí `phaseEstAlgorithm` .
  uid: Microsoft.Quantum.Simulation.AdiabaticStateEnergyUnitary
- summary: Implementace `BlockEncodingToReflection` .
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingAsReflection
- summary: Implementace `BlockEncodingByLCU` .
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingByLCU
- summary: Konverze ((LittleEndian, qubit []) => () je ADJ + CTL) na BlockEncoding
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingFromBEandQubit
- summary: Používá se v implementaci `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.ApplyPauliLCUUnitary
- summary: Implementace `Qubitization` .
  uid: Microsoft.Quantum.Simulation.ApplyQuantumWalkByQubitization
- summary: Provede přípravu stavu pomocí `statePrepUnitary` objektu na automaticky přidělený odhad fáze stavu vstupu s ohledem na `qpeUnitary` výsledný stav pomocí `phaseEstAlgorithm` .
  uid: Microsoft.Quantum.Simulation.EstimateEnergy
- summary: Provede přípravu stavu pomocí `statePrepUnitary` příkazu na automaticky přidělený stav vstupu následovaný přípravou stavu adiabatic s využitím `adiabaticUnitary` a nakonec odhadem fáze s ohledem na `qpeUnitary` výsledný stav pomocí `phaseEstAlgorithm` .
  uid: Microsoft.Quantum.Simulation.EstimateEnergyWithAdiabaticEvolution
- summary: >-
    Představuje dynamický generátor jako sadu simulovaných bran a rozšíření v Pauli.

    Další podrobnosti najdete v tématu [dynamické modelování generátoru](/quantum/libraries/data-structures#dynamical-generator-modeling) .
  uid: Microsoft.Quantum.Simulation.PauliEvolutionImpl
- summary: Implementace více kroků Trotter k aproximaci jednotkového operátoru, který řeší rovnici Schrödinger závislou na čase.
  uid: Microsoft.Quantum.Simulation.TimeDependentTrotterSimulationAlgorithmImpl
- summary: Provede opakované volání k `TrotterStep` aproximaci operátoru vývoj času EXP ( _-iHt_ ).
  uid: Microsoft.Quantum.Simulation.TrotterSimulationAlgorithmImpl
- summary: Implementuje čas – vývoj pomocí termínu obsaženého v `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.TrotterStepImpl
summary: Tento obor názvů obsahuje funkce a operace pro soudržný simulaci dynamiky systémů.
uid: Microsoft.Quantum.Simulation
metadata:
  ms.openlocfilehash: dd1c6fe3baab8788047020bbe3d5dbe2888dec45
  ms.sourcegitcommit: 29e0d88a30e4166fa580132124b0eb57e1f0e986
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 10/27/2020
  ms.locfileid: "92709412"
