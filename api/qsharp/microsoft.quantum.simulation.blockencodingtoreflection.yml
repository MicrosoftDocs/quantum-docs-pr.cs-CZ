### YamlMime:QSharpType
uid: microsoft.quantum.simulation.blockencodingtoreflection
name: BlockEncodingToReflection
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  `BlockEncoding` Převede na ekvivalentní `BLockEncodingReflection`.


  To znamená, že s `BlockEncoding` ohledem na jednotkové $U $, který kóduje nějaký operátor $H $ Interest, převede ho `BlockEncodingReflection` na $U $, který kóduje stejný operátor, ale také splňuje $U ' ^ \dagger = U ' $.

  Tím se zvýší velikost pomocného registru $U $ o jeden qubit.
remarks: Tím se zvýší velikost pomocného registru $U $ o jeden qubit.
syntax: 'function BlockEncodingToReflection (blockEncoding : Microsoft.Quantum.Simulation.BlockEncoding) : Microsoft.Quantum.Simulation.BlockEncodingReflection'
references: '- Simulace Hamiltonian podle Qubitization Guang vystoupí hao nízká, Petr L. Čuangštinahttps://arxiv.org/abs/1610.06546'
input:
  content: '(blockEncoding : Microsoft.Quantum.Simulation.BlockEncoding)'
  types:
  - name: blockEncoding
    summary: '`BlockEncoding` Jednotková $U $, která má být převedena na reflexi.'
    uid: microsoft.quantum.simulation.blockencoding
output:
  content: Microsoft.Quantum.Simulation.BlockEncodingReflection
  types:
  - summary: Jednotková $U ' $ jednají společně na `a` registrech `s` a blokující kódování $H $ a splňuje $U ' ^ \dagger = U ' $.
    uid: microsoft.quantum.simulation.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
metadata:
  ms.openlocfilehash: e656a5ab9e187660a20420049374380ef9726647
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82686920"
