### YamlMime:QSharpType
uid: microsoft.quantum.simulation.blockencodingtoreflection
name: BlockEncodingToReflection
type: function
namespace: microsoft.quantum.simulation
summary: >-
  Převede na `BlockEncoding` ekvivalentní `BLockEncodingReflection` .


  To znamená, že s ohledem na `BlockEncoding` jednotkové $U $, který kóduje nějaký operátor $H $ Interest, převede ho na `BlockEncodingReflection` $U $, který kóduje stejný operátor, ale také splňuje $U ' ^ \Dagger = U ' $.

  Tím se zvýší velikost pomocného registru $U $ o jeden qubit.
remarks: Tím se zvýší velikost pomocného registru $U $ o jeden qubit.
syntax: 'function BlockEncodingToReflection (blockEncoding : Microsoft.Quantum.Simulation.BlockEncoding) : Microsoft.Quantum.Simulation.BlockEncodingReflection'
references: '- Simulace Hamiltonian podle Qubitization Guang vystoupí hao nízká, Petr L. Čuangština https://arxiv.org/abs/1610.06546'
input:
  content: '(blockEncoding : Microsoft.Quantum.Simulation.BlockEncoding)'
  types:
  - name: blockEncoding
    summary: '`BlockEncoding`Jednotková $U $, která má být převedena na reflexi.'
    uid: microsoft.quantum.simulation.blockencoding
output:
  content: Microsoft.Quantum.Simulation.BlockEncodingReflection
  types:
  - summary: Jednotková $U ' $ jednají společně na registrech `a` a `s` blokující kódování $H $ a splňuje $U ' ^ \Dagger = U ' $.
    uid: microsoft.quantum.simulation.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
metadata:
  ms.openlocfilehash: 50c1af14a110401074b4cd6538377de9626ba866
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89343413"
